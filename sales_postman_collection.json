{
	"info": {
		"_postman_id": "5109abde-07c2-499b-bebb-ced1a2082032",
		"name": "Developer Evaluation API (Sales & Products)",
		"description": "Collection for testing the Sales and Products API endpoints for the Developer Evaluation project.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id":	"5999445"
	},
	"item": [
		{
			"name": "Products",
			"description": "Endpoints related to Products",
			"item": [
				{
					"name": "List Products",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/products",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Example: Capture the created product ID into an environment variable",
									"try {",
									"    var jsonData = pm.response.json();",
									"    if (jsonData && jsonData.data && jsonData.data.id) {",
									"        pm.environment.set(\"newProductId\", jsonData.data.id);",
									"        console.log('Set newProductId: ' + jsonData.data.id);",
									"    }",
									"} catch (e) {",
									"    console.log('Could not parse response or find product ID.');",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Example Product {{ $randomInt }}\",\n    \"price\": {{ $randomDecimalF 1 1000 2 }},\n    \"description\": \"This is a test product description generated by Postman.\",\n    \"category\": \"Test Category\",\n    \"image\": \"https://via.placeholder.com/150\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/products",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products"
							]
						},
						"description": "Creates a new product. Uses Postman dynamic variables for unique title and random price. \n\n**Note:** The 'Test' script attempts to save the ID of the created product to the `newProductId` environment variable for potential use in the 'Create Sale' request."
					},
					"response": []
				},
				{
					"name": "Get Product By ID",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/products/{{productIdToGet}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products",
								"{{productIdToGet}}"
							]
						},
						"description": "Gets a specific product by its ID. \n\n**Note:** You need to set the `productIdToGet` variable in your Postman environment (or replace it directly in the URL) with a valid Product ID obtained from 'List Products' or 'Create Product'."
					},
					"response": []
				}
			]
		},
		{
			"name": "Sales",
			"description": "Endpoints related to Sales",
			"item": [
				{
					"name": "List Sales",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/sales",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"sales"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Sale",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Example: Capture the created sale ID into an environment variable",
									"try {",
									"    var jsonData = pm.response.json();",
									"    if (jsonData && jsonData.data && jsonData.data.id) {",
									"        pm.environment.set(\"newSaleId\", jsonData.data.id);",
									"        console.log('Set newSaleId: ' + jsonData.data.id);",
									"    }",
									"} catch (e) {",
									"    console.log('Could not parse response or find sale ID.');",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"saleNumber\": \"SALE-{{$randomInt}}\",\n    \"saleDate\": \"{{$isoTimestamp}}\", \n    \"customerId\": \"{{$guid}}\",\n    \"branchId\": \"{{$guid}}\",\n    \"items\": [\n        {\n            \"productId\": \"{{newProductId}}\", \n            \"quantity\": 5,\n            \"unitPrice\": 15.50 \n        },\n        {\n            \"productId\": \"YOUR_OTHER_PRODUCT_ID\",\n            \"quantity\": 12,\n            \"unitPrice\": 25.00\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/sales",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"sales"
							]
						},
						"description": "Creates a new sale. Uses Postman dynamic variables for SaleNumber, SaleDate, CustomerId, and BranchId.\n\n**IMPORTANT:** \n1. You **MUST** replace `\"YOUR_OTHER_PRODUCT_ID\"` with a real, existing Product ID from your database.\n2. It uses `{{newProductId}}` which assumes you ran the 'Create Product' request successfully and its test script saved the ID to an environment variable. Alternatively, replace `{{newProductId}}` with another existing Product ID.\n3. Ensure the products referenced actually exist before running this request.\n\n**Note:** The 'Test' script attempts to save the ID of the created sale to the `newSaleId` environment variable."
					},
					"response": []
				},
				{
					"name": "Get Sale By ID",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/sales/{{saleIdToGet}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"sales",
								"{{saleIdToGet}}"
							]
						},
						"description": "Gets a specific sale by its ID. \n\n**Note:** You need to set the `saleIdToGet` variable in your Postman environment (or replace it directly in the URL) with a valid Sale ID obtained from 'List Sales' or 'Create Sale'."
					},
					"response": []
				},
				{
					"name": "Cancel Sale",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/sales/{{saleIdToDelete}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"sales",
								"{{saleIdToDelete}}"
							]
						},
						"description": "Cancels a specific sale by its ID.\n\n**Note:** You need to set the `saleIdToDelete` variable in your Postman environment (or replace it directly in the URL) with a valid, **non-cancelled** Sale ID obtained from 'List Sales' or 'Create Sale'."
					},
					"response": []
				}
			]
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:7777",
			"type": "string",
			"description": "Base URL of the API Gateway when running via Docker Compose"
		},
		{
			"key": "productIdToGet",
			"value": "YOUR_PRODUCT_ID_HERE",
			"type": "string",
			"description": "Replace with a valid Product ID to test GET /products/{id}"
		},
		{
			"key": "saleIdToGet",
			"value": "YOUR_SALE_ID_HERE",
			"type": "string",
			"description": "Replace with a valid Sale ID to test GET /sales/{id}"
		},
		{
			"key": "saleIdToDelete",
			"value": "YOUR_SALE_ID_HERE",
			"type": "string",
			"description": "Replace with a valid Sale ID to test DELETE /sales/{id}"
		}
	]
}